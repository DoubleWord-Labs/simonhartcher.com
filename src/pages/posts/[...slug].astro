---
import { type CollectionEntry, getCollection, render } from "astro:content";
import { Image } from "astro:assets";
import Base from "../../layouts/Base.astro";
import Comments from "../../components/Comments.tsx";
import "../../components/Comments.css";
import {
    getPostSlug,
    getCoverImageUrl,
    getPostCoverImage,
} from "../../utils/blog";

export async function getStaticPaths() {
    const posts = await getCollection("blog");
    return posts.map((post) => ({
        params: { slug: getPostSlug(post.id) },
        props: post,
    }));
}

const post = Astro.props;
const { Content } = await render(post);

const coverImage = getPostCoverImage(post);
---

<Base
    title={post.data.title}
    description={post.data.description}
    image={getCoverImageUrl(post.data.cover)}
>
    <article class="blog-post">
        {
            coverImage && (
                <div class="cover-image">
                    <Image src={coverImage} alt="Cover image" class="cover" />
                </div>
            )
        }

        <header class="post-header">
            <h1>{post.data.title}</h1>
            <div class="post-meta">
                <time datetime={post.data.date.toISOString()}>
                    {
                        post.data.date.toLocaleDateString("en-US", {
                            year: "numeric",
                            month: "long",
                            day: "numeric",
                        })
                    }
                </time>
                <span class="separator">â€¢</span>
                <span class="author">By {post.data.author}</span>
            </div>
            {
                post.data.tags.length > 0 && (
                    <div class="tags">
                        {post.data.tags.map((tag) => (
                            <span class="tag">{tag}</span>
                        ))}
                    </div>
                )
            }
        </header>

        <div class="post-content">
            <Content />
        </div>

        <!-- Comments Section -->
        <Comments client:visible postTitle={post.data.title} />
    </article>
</Base>

<style>
    .blog-post {
        /* Use full container width like original */
    }

    .cover-image {
        margin-bottom: 2rem;
    }

    .cover-image .cover {
        width: 100%;
        height: 300px;
        object-fit: cover;
        border-radius: 0.5rem;
    }

    .post-header {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--pico-border-color);
    }

    .post-header h1 {
        margin: 0 0 1rem 0;
        line-height: 1.2;
    }

    .post-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--pico-muted-color);
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }

    .separator {
        opacity: 0.6;
    }

    .tags {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .tag {
        background: var(--pico-secondary-background);
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-size: 0.8rem;
        color: var(--pico-secondary);
    }

    .post-content {
        line-height: 1.7;
    }

    .post-content :global(h2) {
        margin-top: 2rem;
        margin-bottom: 1rem;
    }

    .post-content :global(h3) {
        margin-top: 1.5rem;
        margin-bottom: 0.75rem;
    }

    .post-content :global(pre) {
        margin: 1.5rem 0;
        border-radius: 0.5rem;
        overflow-x: auto;
    }

    .post-content :global(code:not(pre code)) {
        background: var(--pico-code-background-color);
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
        font-size: 0.9em;
    }

    .post-content :global(blockquote) {
        padding: 18px;
        margin: 18px 0;
        border-left: 4px solid rgb(231, 234, 240);
        font-style: normal;
    }

    .post-content :global(ul, ol) {
        margin-bottom: 1rem;
    }

    .post-content :global(li) {
        margin-bottom: 0.5rem;
    }

    .post-content :global(img) {
        display: block;
        margin: 1.5rem auto;
        max-width: 100%;
        height: auto;
        border-radius: 0.5rem;
    }

    /* Allow overriding centering with specific classes */
    .post-content :global(img.left) {
        margin-left: 0;
        margin-right: auto;
    }

    .post-content :global(img.right) {
        margin-left: auto;
        margin-right: 0;
    }

    .post-content :global(img.inline) {
        display: inline;
        margin: 0;
    }
</style>
